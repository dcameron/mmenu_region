<?php

/**
 * @file
 * Contains functions for the Mmenu Region module.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mmenu_region_form_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\block\BlockInterface $block */
  $block = $form_state->getFormObject()->getEntity();

  // Only show this for blocks in the mmenu region.
  if ($block->getRegion() != 'mmenu') {
    return;
  }

  // This will automatically be saved in the third party settings.
  $form['third_party_settings']['#tree'] = TRUE;
  $form['third_party_settings']['mmenu_region']['collapse'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collapse this block onto a new mmenu panel.'),
    '#default_value' => $block->getThirdPartySetting('mmenu_region', 'collapse'),
  );
}

/**
 * Implements hook_page_bottom().
 */
function mmenu_region_page_bottom(array &$page_bottom) {
  $view_builder = \Drupal::entityTypeManager()
    ->getViewBuilder('block');

  $mmenu_blocks = [];
  foreach (_mmenu_region_get_blocks() as $key => $block) {
    if ($block->access('view')) {
      $mmenu_blocks[$key] = $view_builder->view($block);
    }
  }

  if (!empty($mmenu_blocks)) {
    $page_bottom['mmenu'] = [
      '#theme' => 'mmenu_region',
      '#id' => 'mmenu',
      '#content' => $mmenu_blocks,
      '#attached' => [
        'library' => [
          'mmenu_region/mmenu.cdn',
          'mmenu_region/mmenu_region',
        ],
      ],
    ];
  }
}

/**
 * Implements hook_system_info_alter().
 */
function mmenu_region_system_info_alter(array &$info, \Drupal\Core\Extension\Extension $file, $type) {
  if ($type == 'theme') {
    $info['regions']['mmenu'] = 'Mmenu';
  }
}

/**
 * Implements hook_theme().
 */
function mmenu_region_theme($existing, $type, $theme, $path) {
  return [
    'mmenu_region' => [
      'variables' => [
        'id' => '',
        'content' => [],
      ],
    ],
    'block__mmenu_region__panel' => [
      'base hook' => 'block',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for Mmenu region blocks.
 */
function mmenu_region_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Only alter blocks that are in the Mmenu region.
  $blocks = _mmenu_region_get_blocks();
  if (!in_array($variables['elements']['#id'], array_keys($blocks))) {
    return;
  }
  $block = $blocks[$variables['elements']['#id']];

  $suggestions[] = 'block__mmenu_region';
  if ($block->getThirdPartySetting('mmenu_region', 'collapse')) {
    $suggestions[] = 'block__mmenu_region__panel';
  }
}

/**
 * Preprocesses variables for the mmenu_region twig template.
 *
 * @param array $variables
 *   An array of variables to pass to the template.
 */
function template_preprocess_mmenu_region(&$variables) {
  $variables['attributes'] = new \Drupal\Core\Template\Attribute([
    'id' => $variables['id'],
  ]);
}

/**
 * Implements hook_preprocess_HOOK() for Mmenu region panel blocks.
 */
function template_preprocess_block__mmenu_region__panel(&$variables) {
  $block_id = \Drupal\Component\Utility\Html::getId('block-' . $variables['elements']['#id']);
  $link_attributes = [
    'href' => '#' . $block_id,
  ];
  $variables['link'] = [
    'attributes' => new \Drupal\Core\Template\Attribute($link_attributes),
    'text' => $variables['label'],
  ];
  // Turn the block wrapper into an Mmenu panel.
  $variables['attributes']['class'][] = 'Panel';
  // Add a back link.
  $back_text = t('<span class="mm-sronly">Close submenu (:label)</span>', [
    ':label' => $variables['label']
  ]);
  $back_url = \Drupal\Core\Url::fromUserInput('#mm-1', [
    'attributes' => [
      'class' => [
        'Prev',
      ],
    ],
  ]);
  $variables['back_link'] = \Drupal\Core\Link::fromTextAndUrl($back_text, $back_url);
  // Set the mmenu panel title to the block title.
  $variables['title_attributes']['class'][] = 'Title';
}

/**
 * Loads Mmenu region blocks from storage.
 *
 * @return \Drupal\block\BlockInterface[]
 *   The blocks assigned to the Mmenu region.
 */
function _mmenu_region_get_blocks() {
  static $blocks = NULL;
  if ($blocks === NULL) {
    /** @var \Drupal\block\BlockInterface[] $blocks */
    $blocks = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->loadByProperties(['region' => 'mmenu']);
    uasort($blocks, 'Drupal\block\Entity\Block::sort');
  }
  return $blocks;
}
